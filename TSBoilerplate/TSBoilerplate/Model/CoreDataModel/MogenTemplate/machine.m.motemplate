// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.m instead.

#import "_<$managedObjectClassName$>.h"

@implementation _<$managedObjectClassName$>

- (id)init
{
	if((self = [super init]))
	{
		<$foreach Attribute noninheritedAttributes do$>
		<$if Attribute.hasDefinedAttributeType && Attribute.hasScalarAttributeType && ! Attribute.isOptional$>
		<$if Attribute.defaultValue$>
		self.<$Attribute.name$> = [NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:<$Attribute.defaultValue$>];
		<$else$>
		self.<$Attribute.name$> = [NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:0];
		<$endif$><$endif$><$endforeach do$>
	}
	
	return self;
}

- (id) initWithCoder: (NSCoder*) aDecoder
{
    if ([[super class] instancesRespondToSelector: @selector(initWithCoder:)]) {
        self = [super initWithCoder: aDecoder];
    } else {
        self = [super init];
    }
    if (self) {
        <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
        self.<$Attribute.name$> = [aDecoder decodeObjectForKey: @"<$Attribute.name$>"];
        <$endif$><$endforeach do$>
        <$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany && Relationship.isTransient$>
        {
            NSSet *set = [aDecoder decodeObjectForKey: @"<$Relationship.name$>"];
            NSMutableSet *nonretainingSet = NonretainingNSMutableSetMake();
	        [nonretainingSet unionSet: set];
	        self.<$Relationship.name$> = nonretainingSet;
	    }
        <$else$>
        self.<$Relationship.name$> = [aDecoder decodeObjectForKey: @"<$Relationship.name$>"];
        <$endif$><$endforeach do$>
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder*) aCoder
{
    [super encodeWithCoder: aCoder];
    <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
    [aCoder encodeObject: self.<$Attribute.name$> forKey: @"<$Attribute.name$>"];
    <$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$>
    [aCoder encodeObject: self.<$Relationship.name$> forKey: @"<$Relationship.name$>"];
    <$endforeach do$>
}

<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
@synthesize <$Attribute.name$>;
<$if Attribute.hasScalarAttributeType$>

- (<$Attribute.scalarAttributeType$>)<$Attribute.name$>Value {
	NSNumber *result = [self <$Attribute.name$>];
	return [result <$Attribute.scalarAccessorMethodName$>];
}

- (void)set<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)value_ {
	[self set<$Attribute.name.initialCapitalString$>:[NSNumber <$Attribute.scalarFactoryMethodName$>value_]];
}

- (<$Attribute.scalarAttributeType$>)primitive<$Attribute.name.initialCapitalString$>Value {
	NSNumber *result = [self primitive<$Attribute.name.initialCapitalString$>];
	return [result <$Attribute.scalarAccessorMethodName$>];
}

- (void)setPrimitive<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)value_ {
	[self setPrimitive<$Attribute.name.initialCapitalString$>:[NSNumber <$Attribute.scalarFactoryMethodName$>value_]];
}
<$endif$>
<$endif$>
<$endforeach do$>
<$foreach Relationship noninheritedRelationships do$>
@synthesize <$Relationship.name$>;
<$endforeach do$>
<$foreach FetchedProperty noninheritedFetchedProperties do$>
@synthesize <$FetchedProperty.name$>;
<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>{
	NSError *error = nil;
	id result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_ <$endforeach do2$>error:&error];
	if (error) {
#if TARGET_OS_IPHONE
		NSLog(@"error: %@", error);
#else
		[NSApp presentError:error];
#endif
	}
	return result;
}
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>error:(NSError**)error_ {
	NSParameterAssert(moc_);
	NSError *error = nil;

	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	<$if FetchRequest.hasBindings$>
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	<$else$>
	NSDictionary *substitutionVariables = [NSDictionary dictionary];
	<$endif$>
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");

	id result = nil;
	NSArray *results = [moc_ executeFetchRequest:fetchRequest error:&error];

	if (!error) {
		switch ([results count]) {
			case 0:
				//	Nothing found matching the fetch request. That's cool, though: we'll just return nil.
				break;
			case 1:
				result = [results objectAtIndex:0];
				break;
			default:
				NSLog(@"WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %u found (substitutionVariables:%@, results:%@)",
					[results count],
					substitutionVariables,
					results);
		}
	}

	if (error_) *error_ = error;
	return result;
}
<$else$>
+ (NSArray*)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>{
	NSError *error = nil;
	NSArray *result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_ <$endforeach do2$>error:&error];
	if (error) {
#if TARGET_OS_IPHONE
		NSLog(@"error: %@", error);
#else
		[NSApp presentError:error];
#endif
	}
	return result;
}
+ (NSArray*)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>error:(NSError**)error_ {
	NSParameterAssert(moc_);
	NSError *error = nil;

	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	<$if FetchRequest.hasBindings$>
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	<$else$>
	NSDictionary *substitutionVariables = [NSDictionary dictionary];
	<$endif$>
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");

	NSArray *result = [moc_ executeFetchRequest:fetchRequest error:&error];
	if (error_) *error_ = error;
	return result;
}
<$endif$>
<$endforeach do$>
<$if TemplateVar.frc$>
#if TARGET_OS_IPHONE
<$foreach Relationship noninheritedRelationships do$>
<$if Relationship.isToMany$>
- (NSFetchedResultsController*)new<$Relationship.name.initialCapitalString$>FetchedResultsControllerWithSortDescriptors:(NSArray*)sortDescriptors {
	NSFetchRequest *fetchRequest = [NSFetchRequest new];
	<$if !TemplateVar.arc$>[fetchRequest autorelease];<$endif$>
	fetchRequest.entity = [NSEntityDescription entityForName:@"<$Relationship.destinationEntity.name$>" inManagedObjectContext:self.managedObjectContext];
	fetchRequest.predicate = [NSPredicate predicateWithFormat:@"<$Relationship.inverseRelationship.name$> <$if Relationship.inverseRelationship.isToMany$>CONTAINS<$else$>==<$endif$> %@", self];
	fetchRequest.sortDescriptors = sortDescriptors;
	<$if indexedNoninheritedAttributes.@count > 0$>
	NSArray *indexedIDs = [NSArray arrayWithObjects:<$foreach Attribute indexedNoninheritedAttributes do$>self.<$Attribute.name$>, <$endforeach do$>nil];
	NSString *cacheName = [NSString stringWithFormat:@"mogenerator.<$managedObjectClassName$>.%@.<$Relationship.name$>.%@", indexedIDs, sortDescriptors];
	<$endif$>
	return [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest
											   managedObjectContext:self.managedObjectContext
												 sectionNameKeyPath:nil
														  cacheName:<$if indexedNoninheritedAttributes.@count > 0$>cacheName<$else$>nil<$endif$>];
}
<$endif$>
<$endforeach do$>
#endif
<$endif$>
@end
